using System;
using System.Collections.Generic;
using System.Text;
using HCP.ClinicalServices.IF;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using HCP.ClinicalServices.DO;
using HCP.ClinicalServices.DL.Entities;

namespace HCP.ClinicalServices.DL.Repository
{
    public class ClinicRepository : IClinicRepository
    {
        #region Clinic Consultant Link

        public async Task<DO_ReturnParameter> InsertUpdateOPClinicLink(List<DO_OPClinic> obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        foreach (DO_OPClinic oc in obj)
                        {
                           

                            var lst = db.GtEsopcl.Where(x => x.BusinessKey == oc.BusinessKey && x.ClinicId == oc.ClinicId && x.ConsultationId == oc.ConsultationId).ToList();
                            if (lst.Count > 0)
                            {
                                foreach(var i in lst)
                                { 
                                  db.GtEsopcl.Remove(i);
                                }
                            }
                            if (oc.ActiveStatus) { 
                                var op_cl = new GtEsopcl
                                {
                                    BusinessKey = oc.BusinessKey,
                                    ClinicId = oc.ClinicId,
                                    ConsultationId = oc.ConsultationId,
                                    ActiveStatus = oc.ActiveStatus,
                                    FormId = oc.FormId,
                                    CreatedBy = oc.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = oc.TerminalID,
                                };
                                db.GtEsopcl.Add(op_cl);
                            }
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Clinic Linked with Consultation Category Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_OPClinic>> GetClinicConsultantIdList(int businessKey)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var cl_co = db.GtEcapcd
                        .Join(db.GtEcapcd.Where(w => w.CodeType == CodeTypeValue.ConsultationType),
                        l => true,
                        c => true,
                        (l, c) => new { l, c })
                        .GroupJoin(db.GtEsopcl.Where(w => w.BusinessKey == businessKey),
                        lc => new { ConsultationId = lc.c.ApplicationCode, ClinicId = lc.l.ApplicationCode },
                        o => new { o.ConsultationId, o.ClinicId },
                        (lc, o) => new { lc, o = o.FirstOrDefault() }).DefaultIfEmpty()
                        .Where(w => w.lc.l.CodeType == CodeTypeValue.Clinic)
                        .AsNoTracking()
                        .Select(r => new DO_OPClinic
                        {
                            BusinessKey = r.o != null ? r.o.BusinessKey : 0,
                            ClinicId = r.lc.l.ApplicationCode,
                            ClinicDesc = r.lc.l.CodeDesc,
                            ConsultationId = r.lc.c.ApplicationCode,
                            ConsultationDesc = r.lc.c.CodeDesc,
                            ActiveStatus = r.o != null ? r.o.ActiveStatus : false
                        }).OrderBy(x => x.ClinicDesc).ToListAsync();

                    return await cl_co;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        #endregion Clinic Consultant Link

        #region Doctor Clinic Link

        public async Task<List<DO_DoctorClinic>> GetDoctorClinicLinkList(int businessKey, int specialtyId, int doctorId)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var do_cl = db.GtEsopcl
                        .Join(db.GtEcapcd.Where(w => w.CodeType == CodeTypeValue.Clinic),
                            l => new {l.ClinicId },
                            c => new { ClinicId = c.ApplicationCode },
                            (l, c) => new { l, c })
                        .Join(db.GtEcapcd.Where(w => w.CodeType == CodeTypeValue.ConsultationType),
                            lc => new { lc.l.ConsultationId },
                            o => new { ConsultationId = o.ApplicationCode },
                            (lc, o) => new { lc, o })
                         .GroupJoin(db.GtEsdocl.Where(w => w.BusinessKey == businessKey && w.SpecialtyId == specialtyId 
                                    && w.DoctorId == doctorId),
                             lco => new { lco.lc.l.BusinessKey, lco.lc.l.ClinicId, lco.lc.l.ConsultationId },
                             d => new { d.BusinessKey, d.ClinicId, d.ConsultationId },
                             (lco, d) => new { lco, d = d.DefaultIfEmpty().FirstOrDefault() })
                         .Where(w => w.lco.lc.l.BusinessKey == businessKey)
                       //.AsNoTracking()
                       .Select(r => new DO_DoctorClinic
                       {
                           BusinessKey = r.d != null ? r.d.BusinessKey : 0,
                           ClinicId = r.lco.lc.l.ClinicId,
                           ClinicDesc = r.lco.lc.c.CodeDesc,
                           ConsultationId = r.lco.lc.l.ConsultationId,
                           ConsultationDesc = r.lco.o.CodeDesc,
                           ActiveStatus = r.d != null ? r.d.ActiveStatus : false
                       }).ToListAsync();

                    //    BusinessKey = r.d != null ? r.d.BusinessKey : 0,
                    //    ClinicId=r.lco.lc.l!=null ?r.lco.lc.l.ClinicId:0,
                    //    ClinicDesc = r.lco.lc.c!=null? r.lco.lc.c.CodeDesc:null,
                    //    ConsultationId = r.lco.lc.l != null? r.lco.lc.l.ConsultationId:0,
                    //    ConsultationDesc = r.lco.o!=null ? r.lco.o.CodeDesc:null,
                    //    ActiveStatus = r.d != null ? r.d.ActiveStatus : false
                    //}).ToListAsync();

                    return await do_cl;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertUpdateDoctorClinicLink(List<DO_DoctorClinic> obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        foreach (DO_DoctorClinic dc in obj)
                        {
                            var lst = db.GtEsdocl.Where(x => x.BusinessKey == dc.BusinessKey && x.SpecialtyId == dc.SpecialtyId && x.DoctorId == dc.DoctorId
                                                         && x.ClinicId == dc.ClinicId && x.ConsultationId == dc.ConsultationId).ToList();
                            if (lst.Count > 0)
                            {
                                foreach (var i in lst)
                                {
                                    db.GtEsdocl.Remove(i);
                                }
                            }

                            if (dc.ActiveStatus)
                            {
                                var do_cl = new GtEsdocl
                                {
                                    BusinessKey = dc.BusinessKey,
                                    SpecialtyId = dc.SpecialtyId,
                                    DoctorId = dc.DoctorId,
                                    ClinicId = dc.ClinicId,
                                    ConsultationId = dc.ConsultationId,
                                    ActiveStatus = dc.ActiveStatus,
                                    FormId = dc.FormId,
                                    CreatedBy = dc.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = dc.TerminalID,
                                };
                                db.GtEsdocl.Add(do_cl);
                            }
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Clinic Linked with Doctor Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_DoctorClinic>> GetDoctorClinicLinkListbyClinicConsultation(int businessKey, int clinicId, int consultationId)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var do_cl = db.GtEsdocl
                        .Join(db.GtEcapcd.Where(w => w.CodeType == CodeTypeValue.Clinic),
                        l => new { l.ClinicId },
                        c => new { ClinicId = c.ApplicationCode },
                        (l, c) => new { l, c })
                        .Join(db.GtEcapcd.Where(w => w.CodeType == CodeTypeValue.ConsultationType),
                        lc => new { lc.l.ConsultationId },
                        o => new { ConsultationId = o.ApplicationCode },
                        (lc, o) => new { lc, o })
                        .Join(db.GtEsdocd.Where(w => w.ActiveStatus),
                        lco => new { lco.lc.l.DoctorId },
                        d => new { d.DoctorId },
                        (lco, d) => new { lco, d })
                        .Join(db.GtEsspcd.Where(w => w.ActiveStatus),
                        lcod => new { lcod.lco.lc.l.SpecialtyId },
                        s => new { s.SpecialtyId },
                        (lcod, s) => new { lcod, s })
                        .Where(w=> w.lcod.lco.lc.l.BusinessKey == businessKey && w.lcod.lco.lc.l.ClinicId == clinicId && w.lcod.lco.lc.l.ConsultationId == consultationId && w.lcod.lco.lc.l.ActiveStatus)
                       .AsNoTracking()
                       .Select(r => new DO_DoctorClinic
                       {
                           ClinicId = r.lcod.lco.lc.l.ClinicId,
                           ClinicDesc = r.lcod.lco.lc.c.CodeDesc,
                           ConsultationId = r.lcod.lco.lc.l.ConsultationId,
                           ConsultationDesc = r.lcod.lco.o.CodeDesc,
                           DoctorId=r.lcod.lco.lc.l.DoctorId,
                           DoctorName = r.lcod.d.DoctorName,
                           SpecialtyId = r.lcod.lco.lc.l.SpecialtyId,
                           SpecialtyDesc = r.s.SpecialtyDesc

                       }).ToListAsync();

                    return await do_cl;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        #endregion Doctor Clinic Link

        #region Clinic Room Master

        public async Task<List<DO_ClinicRoom>> GetClinicRoomListByBKeyFloorId(int businessKey, int floorId)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var ds_fi = db.GtEadsfi
                        .Where(w => w.BusinessKey == businessKey && w.FloorId == floorId)
                       .AsNoTracking()
                       .Select(r => new DO_ClinicRoom
                       {
                           BusinessKey = r.BusinessKey,
                           RoomNo = r.RoomNo,
                           ActiveStatus = r.ActiveStatus
                       }).OrderBy(x => x.RoomNo).ToListAsync();

                    return await ds_fi;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertIntoClinicRoomMaster(DO_ClinicRoom obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var isRoomNumberExist = db.GtEadsfi.Where(x => x.BusinessKey == obj.BusinessKey && x.RoomNo.ToUpper().Trim() == obj.RoomNo.ToUpper().Trim()).Count();
                        if (isRoomNumberExist > 0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Room Number already Exists" };
                        }

                        var ds_fi = new GtEadsfi
                        {
                            BusinessKey = obj.BusinessKey,
                            RoomNo = obj.RoomNo.Trim(),
                            FloorId = obj.FloorId,
                            ActiveStatus = obj.ActiveStatus,
                            FormId = obj.FormId,
                            CreatedBy = obj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = obj.TerminalID
                        };
                        db.GtEadsfi.Add(ds_fi);

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        string responseMessage = "Room Number Created Successfully.";
                        
                        return new DO_ReturnParameter() { Status = true, Message = responseMessage };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateClinicRoomMaster(DO_ClinicRoom obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEadsfi dsfi = db.GtEadsfi.Where(x => x.BusinessKey == obj.BusinessKey && x.RoomNo.ToUpper().Trim() == obj.RoomNo.ToUpper().Trim() && x.FloorId == obj.FloorId).FirstOrDefault();
                        if (dsfi != null)
                        {
                            dsfi.ActiveStatus = obj.ActiveStatus;
                            dsfi.ModifiedBy = obj.UserID;
                            dsfi.ModifiedOn = System.DateTime.Now;
                            dsfi.ModifiedTerminal = obj.TerminalID;
                        }
                        else
                            return new DO_ReturnParameter() { Status = false, Message = "Room Number not Exists" };

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        string responseMessage = "Room Number Updated Successfully.";

                        return new DO_ReturnParameter() { Status = true, Message = responseMessage };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        #endregion Clinic Room Master

        #region CliniccServiceLink
        public async Task<List<DO_ClinicServiceLink>> GetClinicServiceLinkByBKey(int businessKey)
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var result = db.GtEsclsl
                        .Join(db.GtEcapcd,
                        l => l.ClinicId,
                        c => c.ApplicationCode,
                        (l, c) => new { l, c })
                        .Join(db.GtEcapcd,
                        lc => lc.l.ConsultationId,
                        n => n.ApplicationCode,
                        (lc, n) => new { lc, n })
                        .Join(db.GtEssrms,
                        lcn => lcn.lc.l.ServiceId,
                        s => s.ServiceId,
                        (lcn, s) => new { lcn, s })
                        .Where(w => w.lcn.lc.l.BusinessKey == businessKey)
                                 .Select(x => new DO_ClinicServiceLink
                                 {
                                     BusinessKey = x.lcn.lc.l.BusinessKey,
                                     ClinicId = x.lcn.lc.l.ClinicId,
                                     ClinicDesc = x.lcn.lc.c.CodeDesc,
                                     ConsultationId = x.lcn.lc.l.ConsultationId,
                                     ConsultationDesc = x.lcn.n.CodeDesc,
                                     ServiceId = x.lcn.lc.l.ServiceId,
                                     ServiceDesc = x.s.ServiceDesc,
                                     VisitRule = x.lcn.lc.l.VisitRule,
                                     ActiveStatus = x.lcn.lc.l.ActiveStatus
                                 }
                        ).ToListAsync();
                    return await result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public async Task<List<DO_ApplicationCode>> GetConsultationTypeByBKeyClinicType(int businessKey, int clinictype)
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var result = db.GtEsopcl
                        .Join(db.GtEcapcd,
                        c => c.ConsultationId,
                        n => n.ApplicationCode,
                        (c, n) => new { c, n })
                        .Where(w => w.c.BusinessKey == businessKey && w.c.ClinicId == clinictype)
                                 .Select(x => new DO_ApplicationCode
                                 {
                                     ApplicationCode = x.c.ConsultationId,
                                     CodeDesc = x.n.CodeDesc
                                 }
                        ).ToListAsync();
                    return await result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public async Task<List<DO_ServiceCode>> GetServicesPerformedByDoctor()
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var result = db.GtEssrms
                        .Join(db.GtEspasm,
                        s => s.ServiceId,
                        p => p.ServiceId,
                        (s, p) => new { s, p })
                        .Where(w => w.p.ParameterId == 5 && w.p.ParmAction)
                                 .Select(x => new DO_ServiceCode
                                 {
                                     ServiceId = x.s.ServiceId,
                                     ServiceDesc = x.s.ServiceDesc
                                 }
                        ).ToListAsync();
                    return await result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public async Task<DO_ReturnParameter> AddClinicServiceLink(DO_ClinicServiceLink obj)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var RecordExist = db.GtEsclsl.Where(w => w.BusinessKey == obj.BusinessKey && w.ClinicId == obj.ClinicId && w.ConsultationId == obj.ConsultationId && w.ServiceId == obj.ServiceId).Count();
                        if (RecordExist > 0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Record Already Exists" };
                        }
                        else
                        {

                            var clinicservicelink = new GtEsclsl
                            {
                                BusinessKey = obj.BusinessKey,
                                ClinicId = obj.ClinicId,
                                ConsultationId = obj.ConsultationId,
                                ServiceId = obj.ServiceId,
                                VisitRule = obj.VisitRule,
                                ActiveStatus = obj.ActiveStatus,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = obj.CreatedOn,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtEsclsl.Add(clinicservicelink);

                        }



                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter { Status = true };


                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }
        #endregion

        #region ClinicVisitRate
        public async Task<List<DO_ClinicVisitRate>> GetClinicVisitRateByBKeyClinicTypeCurrCodeRateType(int businessKey, int clinictype, string currencycode, int ratetype)
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var defaultDate = DateTime.Now.Date;
                    var result = db.GtEsclsl.Where(w => w.BusinessKey == businessKey && w.ActiveStatus && (clinictype == 0 ? true : w.ClinicId == clinictype))
                        .Join(db.GtEssrms,
                        l => l.ServiceId,
                        s => s.ServiceId,
                        (l, s) => new { l, s })
                        .Join(db.GtEcapcd,
                        ls => ls.l.ClinicId,
                        c => c.ApplicationCode,
                        (ls, c) => new { ls, c })
                        .Join(db.GtEcapcd,
                        lsc => lsc.ls.l.ConsultationId,
                        n => n.ApplicationCode,
                        (lsc, n) => new { lsc, n })
                        .GroupJoin(db.GtEsclst.Where(w => w.BusinessKey == businessKey && (clinictype == 0 ? true : w.ClinicId == clinictype) && w.CurrencyCode == currencycode && w.RateType == ratetype).OrderByDescending(o => o.ActiveStatus),
                        lscn => lscn.lsc.ls.l.ClinicId,
                        r => r.ClinicId,
                        (lscn, r) => new { lscn, r = r.Where(w => w.ConsultationId == lscn.lsc.ls.l.ConsultationId && w.ServiceId == lscn.lsc.ls.l.ServiceId).FirstOrDefault() })
                                 .Select(x => new DO_ClinicVisitRate
                                 {
                                     ServiceId = x.lscn.lsc.ls.s.ServiceId,
                                     ClinicId = x.lscn.lsc.c.ApplicationCode,
                                     ConsultationId = x.lscn.n.ApplicationCode,
                                     ServiceDesc = x.lscn.lsc.ls.s.ServiceDesc,
                                     ClinicDesc = x.lscn.lsc.c.CodeDesc,
                                     ConsultationDesc = x.lscn.n.CodeDesc,
                                     Tariff = x.r != null ? x.r.Tariff : 0,
                                     EffectiveDate = x.r != null ? x.r.EffectiveDate : defaultDate,
                                     ActiveStatus = x.r != null ? x.r.ActiveStatus : true,
                                 }
                        ).ToListAsync();
                    return await result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public async Task<DO_ReturnParameter> AddOrUpdateClinicVisitRate(List<DO_ClinicVisitRate> obj)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        foreach (var c_visitrate in obj)
                        {
                            var ServiceExist = db.GtEsclst.Where(w => w.ServiceId == c_visitrate.ServiceId && w.BusinessKey == c_visitrate.BusinessKey && w.ClinicId == c_visitrate.ClinicId && w.ConsultationId == c_visitrate.ConsultationId && w.CurrencyCode == c_visitrate.CurrencyCode && w.RateType == c_visitrate.RateType && w.EffectiveTill == null).FirstOrDefault();
                            if (ServiceExist != null)
                            {
                                if (c_visitrate.EffectiveDate != ServiceExist.EffectiveDate)
                                {
                                    if (c_visitrate.EffectiveDate < ServiceExist.EffectiveDate)
                                    {
                                        return new DO_ReturnParameter() { Status = false, Message = "New effective date can't be less than the current effective date" };
                                    }
                                    ServiceExist.EffectiveTill = c_visitrate.EffectiveDate.AddDays(-1);
                                    ServiceExist.ModifiedBy = c_visitrate.UserID;
                                    ServiceExist.ModifiedOn = c_visitrate.CreatedOn;
                                    ServiceExist.ModifiedTerminal = c_visitrate.TerminalID;
                                    ServiceExist.ActiveStatus = false;

                                    var clinicvisitrate = new GtEsclst
                                    {
                                        BusinessKey = c_visitrate.BusinessKey,
                                        ServiceId = c_visitrate.ServiceId,
                                        ClinicId = c_visitrate.ClinicId,
                                        ConsultationId = c_visitrate.ConsultationId,
                                        RateType = c_visitrate.RateType,
                                        CurrencyCode = c_visitrate.CurrencyCode,
                                        EffectiveDate = c_visitrate.EffectiveDate,
                                        Tariff = c_visitrate.Tariff,
                                        ActiveStatus = c_visitrate.ActiveStatus,
                                        FormId = c_visitrate.FormId,
                                        CreatedBy = c_visitrate.UserID,
                                        CreatedOn = c_visitrate.CreatedOn,
                                        CreatedTerminal = c_visitrate.TerminalID
                                    };
                                    db.GtEsclst.Add(clinicvisitrate);


                                }
                                else
                                {
                                    ServiceExist.Tariff = c_visitrate.Tariff;
                                    ServiceExist.ActiveStatus = c_visitrate.ActiveStatus;

                                    ServiceExist.ModifiedBy = c_visitrate.UserID;
                                    ServiceExist.ModifiedOn = c_visitrate.CreatedOn;
                                    ServiceExist.ModifiedTerminal = c_visitrate.TerminalID;
                                }

                            }
                            else
                            {
                                if (c_visitrate.Tariff != 0)
                                {
                                    var clinicvisitrate = new GtEsclst
                                    {
                                        BusinessKey = c_visitrate.BusinessKey,
                                        ServiceId = c_visitrate.ServiceId,
                                        ClinicId = c_visitrate.ClinicId,
                                        ConsultationId = c_visitrate.ConsultationId,
                                        RateType = c_visitrate.RateType,
                                        CurrencyCode = c_visitrate.CurrencyCode,
                                        EffectiveDate = c_visitrate.EffectiveDate,
                                        Tariff = c_visitrate.Tariff,
                                        ActiveStatus = c_visitrate.ActiveStatus,
                                        FormId = c_visitrate.FormId,
                                        CreatedBy = c_visitrate.UserID,
                                        CreatedOn = c_visitrate.CreatedOn,
                                        CreatedTerminal = c_visitrate.TerminalID
                                    };
                                    db.GtEsclst.Add(clinicvisitrate);
                                }

                            }
                        }
                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter { Status = true };


                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        return new DO_ReturnParameter() { Status = false, Message = ex.Message };
                    }
                }
            }
        }
        #endregion
    }
}
