using System;
using System.Collections.Generic;
using System.Text;
using eSyaClinicalServices.IF;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using eSyaClinicalServices.DO;
using eSyaClinicalServices.DL.Entities;

namespace eSyaClinicalServices.DL.Repository
{
    public class SpecialtyCodesRepository : ISpecialtyCodesRepository
    {
        public async Task<DO_ReturnParameter> InsertSpecialtyCodes(DO_SpecialtyCodes obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var isSpecialtyExist = db.GtEsspcd.Where(x => x.SpecialtyDesc.ToUpper().Replace(" ","") == obj.SpecialtyDesc.ToUpper().Replace(" ", "")).Count();
                        if(isSpecialtyExist > 0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Specialty Exists already" };
                        }

                        int maxSpecialtyId = db.GtEsspcd.Select(d => d.SpecialtyId).DefaultIfEmpty().Max();
                        int SpecId = maxSpecialtyId + 1;

                        var sMaster = new GtEsspcd
                        {
                            SpecialtyId = SpecId,
                            SpecialtyDesc = obj.SpecialtyDesc.Trim(),
                            Gender = obj.Gender,
                            SpecialtyType = obj.SpecialtyType,
                            AlliedServices = obj.AlliedServices,
                            ActiveStatus = obj.ActiveStatus,
                            FormId = obj.FormId,
                            CreatedBy = obj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = obj.TerminalID,

                        };
                        db.GtEsspcd.Add(sMaster);

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Specialty Code Created Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateSpecialtyCodes(DO_SpecialtyCodes obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEsspcd sp_ms = db.GtEsspcd.Where(w => w.SpecialtyId == obj.SpecialtyID).FirstOrDefault();
                        if (sp_ms == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Specialty Id does not exist." };
                        }

                        sp_ms.SpecialtyDesc = obj.SpecialtyDesc.Trim();
                        sp_ms.Gender = obj.Gender;
                        sp_ms.SpecialtyType = obj.SpecialtyType;
                        sp_ms.AlliedServices = obj.AlliedServices;
                        sp_ms.ActiveStatus = obj.ActiveStatus;
                        sp_ms.ModifiedBy = obj.UserID;
                        sp_ms.ModifiedOn = System.DateTime.Now;
                        sp_ms.ModifiedTerminal = obj.TerminalID;

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Specialty Code Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> DeleteSpecialtyCodes(DO_SpecialtyCodes obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEsspcd sp_ms = db.GtEsspcd.Where(w => w.SpecialtyId == obj.SpecialtyID).FirstOrDefault();
                        if (sp_ms == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Specialty Id does not exist." };
                        }

                        sp_ms.ActiveStatus = false;
                        sp_ms.ModifiedBy = obj.UserID;
                        sp_ms.ModifiedOn = System.DateTime.Now;
                        sp_ms.ModifiedTerminal = obj.TerminalID;

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Specialty Code Deleted Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_SpecialtyCodes>> GetSpecialtyCodesList()
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var sp_ms = db.GtEsspcd
                        .Where(w => w.ActiveStatus == true)
                        .AsNoTracking()
                        .Select(x => new DO_SpecialtyCodes
                        {
                            SpecialtyID = x.SpecialtyId,
                            SpecialtyDesc = x.SpecialtyDesc,
                            Gender = x.Gender,
                            SpecialtyType = x.SpecialtyType,
                            AlliedServices = x.AlliedServices,
                            ActiveStatus = x.ActiveStatus

                        }).OrderBy(x => x.SpecialtyDesc).ToListAsync();

                    return await sp_ms;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_SpecialtyCodes> GetSpecialtyCodes(int specialtyId)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var sp_ms = db.GtEsspcd
                        .Where(w => w.SpecialtyId == specialtyId)
                        .AsNoTracking()
                        .Select(x => new DO_SpecialtyCodes
                        {
                            SpecialtyID = x.SpecialtyId,
                            SpecialtyDesc = x.SpecialtyDesc,
                            Gender = x.Gender,
                            SpecialtyType = x.SpecialtyType,
                            AlliedServices = x.AlliedServices,
                            ActiveStatus = x.ActiveStatus

                        }).FirstOrDefaultAsync();

                    return await sp_ms;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
    }
}
