using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using HCP.ClinicalServices.IF;
using HCP.ClinicalServices.DO;
using HCP.ClinicalServices.DL.Entities;

namespace HCP.ClinicalServices.DL.Repository
{
    public class DoctorMasterRepository : IDoctorMasterRepository
    {
        #region Doctor Master
        public async Task<DO_ReturnParameter> InsertIntoDoctorMaster(DO_DoctorMaster obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var isDoctorExist = db.GtEsdocd.Where(x => x.DoctorName.ToUpper().Trim() == obj.DoctorName.ToUpper().Trim()).Count();
                        if(isDoctorExist>0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Doctor Name already Exists" };
                        }

                        isDoctorExist = db.GtEsdocd.Where(x => x.DoctorShortName.ToUpper().Trim() == obj.DoctorShortName.ToUpper().Trim()).Count();
                        if (isDoctorExist > 0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Doctor Short Name already Exists" };
                        }
                        if(!string.IsNullOrEmpty(obj.MobileNumber) && obj.MobileNumber != "0")
                        {
                            var isMobileNoExist = db.GtEsdocd.Where(x => x.MobileNumber.Trim() == obj.MobileNumber.Trim() && x.ActiveStatus).Count();
                            if(isMobileNoExist>0)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Mobile number entered is already Exists" };
                            }
                        }
                        if (!string.IsNullOrEmpty(obj.EMailId))
                        {
                            var isEmailIdExist = db.GtEsdocd.Where(x => x.EmailId.Trim() == obj.EMailId.Trim() && x.ActiveStatus).Count();
                            if (isEmailIdExist > 0)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "EMail id entered is already Exists" };
                            }
                        }

                        int maxDoctorId = db.GtEsdocd.Select(d => d.DoctorId).DefaultIfEmpty().Max();
                        int DocId = maxDoctorId + 1;

                        var dMaster = new GtEsdocd
                        {
                            DoctorId = DocId,
                            DoctorName = obj.DoctorName.Trim(),
                            DoctorShortName = obj.DoctorShortName.Trim(),
                            Gender = obj.Gender,
                            Qualification = obj.Qualification,
                            DoctorRegnNo = obj.DoctorRegnNo,
                            EmailId = obj.EMailId,
                            DoctorClass = obj.DoctorClass,
                            Isdcode = obj.ISDCode,
                            MobileNumber = obj.MobileNumber,
                            DoctorCategory = obj.DoctorCategory,
                            AllowConsultation = obj.AllowConsultation,
                            IsRevenueShareApplicable = obj.IsRevenueShareApplicable,
                            AllowSms = obj.AllowSMS,
                            TimeSlotInMintues=obj.TimeSlotInMintues,
                            //LanguageKnown=obj.LanguageKnown,
                            //Experience=obj.Experience,
                            TraiffFrom=obj.TraiffFrom,
                            DoctorRemarks=obj.DoctorRemarks,
                            ActiveStatus = obj.ActiveStatus,
                            FormId = obj.FormID,
                            CreatedBy = obj.UserID,
                            CreatedOn = System.DateTime.Now,
                            CreatedTerminal = obj.TerminalID,

                        };
                        db.GtEsdocd.Add(dMaster);
                        if(obj.Photo!=null)
                        {
                            var doc_image = db.GtEsdoim.Where(x => x.DoctorId== DocId).FirstOrDefault();
                            if (doc_image != null)
                            {
                                doc_image.DoctorImage = obj.Photo;
                                doc_image.ActiveStatus = true;
                                doc_image.ModifiedBy = obj.UserID;
                                doc_image.ModifiedOn = System.DateTime.Now;
                                doc_image.ModifiedTerminal = obj.TerminalID;
                                await db.SaveChangesAsync();
                            }
                            else
                            {
                                var dimage = new GtEsdoim
                                {
                                    DoctorId = DocId,
                                    DoctorImage = obj.Photo,
                                    ActiveStatus = true,
                                    CreatedBy = obj.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = obj.TerminalID
                                };
                                db.GtEsdoim.Add(dimage);
                            }
                        }
                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Doctor Master Created Successfully.", ID = DocId };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateDoctorMaster(DO_DoctorMaster obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEsdocd dc_ms = db.GtEsdocd.Where(w => w.DoctorId == obj.DoctorId).FirstOrDefault();
                        if (dc_ms == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Doctor Id does not exist." };
                        }

                        var isDoctorExist = db.GtEsdocd.Where(x => x.DoctorName.ToUpper().Trim() == obj.DoctorName.ToUpper().Trim() && x.DoctorId != obj.DoctorId).Count();
                        if (isDoctorExist > 0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Doctor Name already Exists" };
                        }

                        isDoctorExist = db.GtEsdocd.Where(x => x.DoctorShortName.ToUpper().Trim() == obj.DoctorShortName.ToUpper().Trim() && x.DoctorId != obj.DoctorId).Count();
                        if (isDoctorExist > 0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Doctor Short Name already Exists" };
                        }
                        if (!string.IsNullOrEmpty(obj.MobileNumber) && obj.MobileNumber != "0")
                        {
                            var isMobileNoExist = db.GtEsdocd.Where(x => x.MobileNumber.Trim() == obj.MobileNumber.Trim() && x.DoctorId != obj.DoctorId && x.ActiveStatus).Count();
                            if (isMobileNoExist > 0)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Mobile number entered is already Exists" };
                            }
                        }
                        if (!string.IsNullOrEmpty(obj.EMailId))
                        {
                            var isEmailIdExist = db.GtEsdocd.Where(x => x.EmailId.Trim() == obj.EMailId.Trim() && x.DoctorId != obj.DoctorId && x.ActiveStatus).Count();
                            if (isEmailIdExist > 0)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "EMail id entered is already Exists" };
                            }
                        }

                        dc_ms.DoctorName = obj.DoctorName.Trim();
                        dc_ms.DoctorShortName = obj.DoctorShortName;
                        dc_ms.Gender = obj.Gender;
                        dc_ms.Qualification = obj.Qualification;
                        dc_ms.DoctorRegnNo = obj.DoctorRegnNo;
                        dc_ms.Isdcode = obj.ISDCode;
                        dc_ms.MobileNumber = obj.MobileNumber;
                        dc_ms.EmailId = obj.EMailId;
                        dc_ms.DoctorClass = obj.DoctorClass;
                        dc_ms.DoctorCategory = obj.DoctorCategory;
                        dc_ms.AllowConsultation = obj.AllowConsultation;
                        dc_ms.IsRevenueShareApplicable = obj.IsRevenueShareApplicable;
                        dc_ms.AllowSms = obj.AllowSMS;
                        dc_ms.TimeSlotInMintues = obj.TimeSlotInMintues;
                        //dc_ms.LanguageKnown = obj.LanguageKnown;
                        //dc_ms.Experience = obj.Experience;
                        dc_ms.TraiffFrom = obj.TraiffFrom;
                        dc_ms.DoctorRemarks = obj.DoctorRemarks;
                        dc_ms.ActiveStatus = obj.ActiveStatus;
                        dc_ms.ModifiedBy = obj.UserID;
                        dc_ms.ModifiedOn = System.DateTime.Now;
                        dc_ms.ModifiedTerminal = obj.TerminalID;
                        
                        await db.SaveChangesAsync();
                        if (obj.Photo != null)
                        {
                            var doc_image = db.GtEsdoim.Where(x => x.DoctorId == obj.DoctorId).FirstOrDefault();

                            if (doc_image != null)
                            {
                                doc_image.DoctorImage = obj.Photo;
                                doc_image.ActiveStatus = true;
                                doc_image.ModifiedBy = obj.UserID;
                                doc_image.ModifiedOn = System.DateTime.Now;
                                doc_image.ModifiedTerminal = obj.TerminalID;
                                await db.SaveChangesAsync();
                            }
                            else
                            {
                                var dimage = new GtEsdoim
                                {
                                    DoctorId = obj.DoctorId,
                                    DoctorImage = obj.Photo,
                                    ActiveStatus = true,
                                    CreatedBy = obj.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = obj.TerminalID
                                };
                                db.GtEsdoim.Add(dimage);
                                await db.SaveChangesAsync();
                            }
                        }
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Doctor Master Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_DoctorMaster>> GetDoctorMasterList()
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var dc_ms = db.GtEsdocd
                        .GroupJoin(db.GtEcapcd.Where(x => x.CodeType == CodeTypeValue.DoctorClass),
                        d => new { d.DoctorClass },
                        a => new { DoctorClass = a.ApplicationCode },
                        (d, a) => new { d, a = a.FirstOrDefault() })
                        .GroupJoin(db.GtEcapcd.Where(x => x.CodeType == CodeTypeValue.DoctorCategory),
                        dd => new { dd.d.DoctorCategory },
                        aa => new { DoctorCategory = aa.ApplicationCode },
                        (dd, aa) => new { dd, aa = aa.FirstOrDefault() })
                        .Where(w => w.dd.d.ActiveStatus == true)
                        .AsNoTracking()
                        .Select(x => new DO_DoctorMaster
                        {
                            DoctorId = x.dd.d.DoctorId,

                            DoctorName = x.dd.d.DoctorName,
                            DoctorShortName = x.dd.d.DoctorShortName,
                            Gender = x.dd.d.Gender == "F" ? "Female" : "Male",
                            Qualification = x.dd.d.Qualification,
                            DoctorRegnNo = x.dd.d.DoctorRegnNo,
                            ISDCode = x.dd.d.Isdcode,
                            MobileNumber = x.dd.d.MobileNumber,
                            DoctorClass = x.dd.d.DoctorClass,
                            DoctorClassDesc = x.dd.a != null ? x.dd.a.CodeDesc : string.Empty,
                            DoctorCategory = x.dd.d.DoctorCategory,
                            DoctorCategoryDesc = x.aa != null ? x.aa.CodeDesc : string.Empty,
                            AllowConsultation = x.dd.d.AllowConsultation,
                            IsRevenueShareApplicable = x.dd.d.IsRevenueShareApplicable,
                            AllowSMS = x.dd.d.AllowSms,
                            ActiveStatus = x.dd.d.ActiveStatus,
                            TimeSlotInMintues = x.dd.d.TimeSlotInMintues,
                            //LanguageKnown= x.dd.d.LanguageKnown,
                            //Experience = x.dd.d.Experience,
                            TraiffFrom = x.dd.d.TraiffFrom,
                            DoctorRemarks = x.dd.d.DoctorRemarks,

                        }).OrderBy(x => x.DoctorName).ToListAsync();

                    return await dc_ms;
                }
                catch (DbUpdateException ex)
                {
                    throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<List<DO_DoctorMaster>> GetDoctorMasterListForPrefix(string doctorNamePrefix)
        {
            if (doctorNamePrefix == null)
                doctorNamePrefix = "";
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var dc_ms = db.GtEsdocd
                        .GroupJoin(db.GtEcapcd.Where(x => x.CodeType == CodeTypeValue.DoctorClass),
                        d => new { d.DoctorClass },
                        a => new { DoctorClass = a.ApplicationCode },
                        (d, a) => new { d, a = a.FirstOrDefault() })
                        .GroupJoin(db.GtEcapcd.Where(x => x.CodeType == CodeTypeValue.DoctorCategory),
                        dd => new { dd.d.DoctorCategory },
                        aa => new { DoctorCategory = aa.ApplicationCode },
                        (dd, aa) => new { dd, aa = aa.FirstOrDefault() })
                        .Where(w => w.dd.d.DoctorName.StartsWith(doctorNamePrefix))
                        .AsNoTracking()
                        .Select(x => new DO_DoctorMaster
                        {
                            DoctorId = x.dd.d.DoctorId,

                            DoctorName = x.dd.d.DoctorName,
                            DoctorShortName = x.dd.d.DoctorShortName,
                            Gender = x.dd.d.Gender == "F" ? "Female" : "Male",
                            Qualification = x.dd.d.Qualification,
                            DoctorRegnNo = x.dd.d.DoctorRegnNo,
                            ISDCode = x.dd.d.Isdcode,
                            MobileNumber = x.dd.d.MobileNumber,
                            DoctorClass = x.dd.d.DoctorClass,
                            DoctorClassDesc = x.dd.a != null ? x.dd.a.CodeDesc : string.Empty,
                            DoctorCategory = x.dd.d.DoctorCategory,
                            DoctorCategoryDesc = x.aa != null ? x.aa.CodeDesc : string.Empty,
                            AllowConsultation = x.dd.d.AllowConsultation,
                            IsRevenueShareApplicable = x.dd.d.IsRevenueShareApplicable,
                            AllowSMS = x.dd.d.AllowSms,
                            ActiveStatus = x.dd.d.ActiveStatus,
                            TimeSlotInMintues = x.dd.d.TimeSlotInMintues,
                            //LanguageKnown = x.dd.d.LanguageKnown,
                            //Experience = x.dd.d.Experience,
                            TraiffFrom = x.dd.d.TraiffFrom,
                            DoctorRemarks = x.dd.d.DoctorRemarks,

                        }).OrderBy(x => x.DoctorName).ToListAsync();

                    return await dc_ms;
                }
                catch (DbUpdateException ex)
                {
                    throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_DoctorMaster> GetDoctorMaster(int doctorId)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var dc_ms =await db.GtEsdocd
                        .GroupJoin(db.GtEcapcd.Where(x => x.CodeType == CodeTypeValue.DoctorClass),
                        d => new { d.DoctorClass },
                        a => new { DoctorClass = a.ApplicationCode },
                        (d, a) => new { d, a = a.FirstOrDefault() })
                        .GroupJoin(db.GtEcapcd.Where(x => x.CodeType == CodeTypeValue.DoctorCategory),
                        dd => new { dd.d.DoctorCategory },
                        aa => new { DoctorCategory = aa.ApplicationCode },
                        (dd, aa) => new { dd, aa = aa.FirstOrDefault() })
                        .Where(w => w.dd.d.DoctorId == doctorId)
                        .AsNoTracking()
                        .Select(x => new DO_DoctorMaster
                        {
                            DoctorId = x.dd.d.DoctorId,
                            DoctorName = x.dd.d.DoctorName,
                            DoctorShortName = x.dd.d.DoctorShortName,
                            Gender = x.dd.d.Gender,
                            Qualification = x.dd.d.Qualification,
                            EMailId = x.dd.d.EmailId,
                            DoctorRegnNo = x.dd.d.DoctorRegnNo,
                            ISDCode = x.dd.d.Isdcode,
                            MobileNumber = x.dd.d.MobileNumber,
                            DoctorClass=x.dd.d.DoctorClass,
                            DoctorClassDesc = x.dd.a != null ? x.dd.a.CodeDesc : string.Empty,
                            DoctorCategory = x.dd.d.DoctorCategory,
                            DoctorCategoryDesc = x.aa != null ? x.aa.CodeDesc : string.Empty,
                            AllowConsultation = x.dd.d.AllowConsultation,
                            IsRevenueShareApplicable = x.dd.d.IsRevenueShareApplicable,
                            AllowSMS = x.dd.d.AllowSms,
                            ActiveStatus = x.dd.d.ActiveStatus,
                            TimeSlotInMintues = x.dd.d.TimeSlotInMintues,
                            //LanguageKnown = x.dd.d.LanguageKnown,
                            //Experience = x.dd.d.Experience,
                            TraiffFrom = x.dd.d.TraiffFrom,
                            DoctorRemarks = x.dd.d.DoctorRemarks,

                        }).FirstOrDefaultAsync();
                    if (dc_ms != null)
                    {
                        var docimage = db.GtEsdoim.Where(x => x.DoctorId == dc_ms.DoctorId).FirstOrDefault();
                        if (docimage != null)
                        {
                            dc_ms.Photo = docimage.DoctorImage;
                        }
                    }
                    return  dc_ms;
                }
                catch (DbUpdateException ex)
                {
                    throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_ReturnParameter> ActiveOrDeActiveDoctor(bool status, int doctorId)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEsdocd doctor = db.GtEsdocd.Where(x => x.DoctorId == doctorId).FirstOrDefault();
                        if (doctor == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Doctor is not exist" };
                        }

                        doctor.ActiveStatus = status;
                        await db.SaveChangesAsync();
                        dbContext.Commit();

                        if (status == true)
                            return new DO_ReturnParameter() { Status = true, Message = "Doctor Activated Successfully." };
                        else
                            return new DO_ReturnParameter() { Status = true, Message = "Doctor De Activated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));

                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }
        #endregion

        #region Doctor Business Link
        public async Task<List<DO_DoctorMaster>> GetDoctorMasterBusinessList(int businessKey)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var dc_ms = db.GtEsdocd
                        .GroupJoin(db.GtEcapcd.Where(x => x.CodeType == CodeTypeValue.DoctorClass),
                        d => new { d.DoctorClass },
                        a => new { DoctorClass = a.ApplicationCode },
                        (d, a) => new { d, a = a.FirstOrDefault() })
                        .GroupJoin(db.GtEcapcd.Where(x => x.CodeType == CodeTypeValue.DoctorCategory),
                        dd => new { dd.d.DoctorCategory },
                        aa => new { DoctorCategory = aa.ApplicationCode },
                        (dd, aa) => new { dd, aa = aa.FirstOrDefault() })
                        .GroupJoin(db.GtEsdobl.Where(x => x.BusinessKey == businessKey && x.ActiveStatus),
                        ddd => new { ddd.dd.d.DoctorId },
                        dbl => new { dbl.DoctorId },
                        (ddd, dbl) => new { ddd, dbl = dbl.FirstOrDefault() })
                        .Where(w => w.ddd.dd.d.ActiveStatus == true)
                        .AsNoTracking()
                        .Select(x => new DO_DoctorMaster
                        {
                            DoctorId = x.ddd.dd.d.DoctorId,

                            DoctorName = x.ddd.dd.d.DoctorName,
                            DoctorShortName = x.ddd.dd.d.DoctorShortName,
                            Gender = x.ddd.dd.d.Gender == "F" ? "Female" : "Male",
                            Qualification = x.ddd.dd.d.Qualification,
                            DoctorRegnNo = x.ddd.dd.d.DoctorRegnNo,
                            ISDCode = x.ddd.dd.d.Isdcode,
                            MobileNumber = x.ddd.dd.d.MobileNumber,
                            DoctorClass = x.ddd.dd.d.DoctorClass,
                            DoctorClassDesc = x.ddd.dd.a != null ? x.ddd.dd.a.CodeDesc : string.Empty,
                            DoctorCategory = x.ddd.dd.d.DoctorCategory,
                            DoctorCategoryDesc = x.ddd.aa != null ? x.ddd.aa.CodeDesc : string.Empty,
                            AllowConsultation = x.ddd.dd.d.AllowConsultation,
                            IsRevenueShareApplicable = x.ddd.dd.d.IsRevenueShareApplicable,
                            AllowSMS = x.ddd.dd.d.AllowSms,
                            ActiveStatus = x.dbl != null ? x.dbl.ActiveStatus : false

                        }).OrderBy(x => x.DoctorName).ToListAsync();

                    return await dc_ms;
                }
                catch (DbUpdateException ex)
                {
                    throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertIntoDoctorBusinessLink(List<DO_DoctorMaster> obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        if (obj != null)
                        {
                            int _doctorId = obj.FirstOrDefault().DoctorId;
                            var doc_businesslist = db.GtEsdobl.Where(c => c.DoctorId == _doctorId).ToList();
                            if (doc_businesslist.Count > 0)
                            {
                                foreach (var objdoc in doc_businesslist)
                                {
                                    db.GtEsdobl.Remove(objdoc);
                                    db.SaveChanges();
                                }

                            }
                            
                            foreach (var key in obj.Where(x=>x.ActiveStatus==true))
                            {
                                GtEsdobl objkeys = new GtEsdobl
                                {
                                    DoctorId = key.DoctorId,
                                    BusinessKey = key.BusinessKey,
                                    ActiveStatus = key.ActiveStatus,
                                    FormId = key.FormID,
                                    CreatedBy = key.UserID,
                                    CreatedOn = DateTime.Now,
                                    CreatedTerminal = key.TerminalID
                                };
                                db.GtEsdobl.Add(objkeys);
                                await db.SaveChangesAsync();

                            }
                            
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Business Location Linked Successfully" };
                        }

                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "No Business Locations selected to Save" };
                        }
                    }

                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        //public async Task<DO_ReturnParameter> InsertIntoDoctorBusinessLink(List<DO_DoctorMaster> obj)
        //{
        //    using (var db = new eSyaEnterprise())
        //    {
        //        using (var dbContext = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                bool dataSaved = false;
        //                foreach (DO_DoctorMaster objDM in obj)
        //                {
        //                    GtEsdobl dMaster = db.GtEsdobl.Where(x => x.BusinessKey == objDM.BusinessKey && x.DoctorId == objDM.DoctorId).FirstOrDefault();
        //                    if (dMaster == null)
        //                    {
        //                        if (objDM.ActiveStatus)
        //                        {
        //                            dMaster = new GtEsdobl
        //                            {
        //                                BusinessKey = objDM.BusinessKey,
        //                                DoctorId = objDM.DoctorId,
        //                                ActiveStatus = objDM.ActiveStatus,
        //                                FormId = objDM.FormID,
        //                                CreatedBy = objDM.UserID,
        //                                CreatedOn = System.DateTime.Now,
        //                                CreatedTerminal = objDM.TerminalID,

        //                            };
        //                            db.GtEsdobl.Add(dMaster);
        //                            dataSaved = true;
        //                        }
        //                    }
        //                    else if(objDM.ActiveStatus != dMaster.ActiveStatus)
        //                    {
        //                        dMaster.ActiveStatus = objDM.ActiveStatus;
        //                        dMaster.ModifiedBy = objDM.UserID;
        //                        dMaster.ModifiedOn = System.DateTime.Now;
        //                        dMaster.ModifiedTerminal = objDM.TerminalID;
        //                        dataSaved = true;
        //                    }
        //                }
        //                if(!dataSaved)
        //                {
        //                    return new DO_ReturnParameter() { Status = false, Message = "Please Select any Doctor to Save." };
        //                }

        //                await db.SaveChangesAsync();
        //                dbContext.Commit();
        //                return new DO_ReturnParameter() { Status = true, Message = "Doctor Business Link Updated Successfully." };
        //            }
        //            catch (DbUpdateException ex)
        //            {
        //                dbContext.Rollback();
        //                throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
        //            }
        //            catch (Exception ex)
        //            {
        //                dbContext.Rollback();
        //                throw ex;
        //            }
        //        }
        //    }
        //}

        public async Task<List<DO_BusinessLocation>> GetBusinessLocationDoctorList(int doctorId)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var dc_ms = db.GtEcbsln
                        .GroupJoin(db.GtEsdobl.Where(x => x.DoctorId == doctorId),
                        d => new { d.BusinessKey },
                        a => new { a.BusinessKey },
                        (d, a) => new { d, a = a.FirstOrDefault() })
                        //.Join(db.GtEsdocd,
                        //aa => new { aa.a.DoctorId },
                        //bb => new { bb.DoctorId },
                        //(aa, bb) => new { aa, bb })
                        .Where(w => w.d.ActiveStatus == true)
                        .AsNoTracking()
                        .Select(x => new DO_BusinessLocation
                        {
                            BusinessKey = x.d.BusinessKey,
                            LocationDescription = x.d.BusinessName,
                            //SegmentDesc = Convert.ToString(x.d.GtEcbssg.SegmentDesc),
                            SegmentDesc = x.d.BusinessName,
                            ActiveStatus = x.a != null ? x.a.ActiveStatus : false

                        }).OrderBy(x => x.LocationDescription).ToListAsync();

                    return await dc_ms;
                }
                catch (DbUpdateException ex)
                {
                    throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertIntoBusinessDoctorLink(List<DO_DoctorMaster> obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        bool dataSaved = false;
                        foreach (DO_DoctorMaster objDM in obj)
                        {
                            GtEsdobl dMaster = db.GtEsdobl.Where(x => x.BusinessKey == objDM.BusinessKey && x.DoctorId == objDM.DoctorId).FirstOrDefault();
                            if (dMaster == null)
                            {
                                if (objDM.ActiveStatus)
                                {
                                    dMaster = new GtEsdobl
                                    {
                                        BusinessKey = objDM.BusinessKey,
                                        DoctorId = objDM.DoctorId,
                                        ActiveStatus = objDM.ActiveStatus,
                                        FormId = objDM.FormID,
                                        CreatedBy = objDM.UserID,
                                        CreatedOn = System.DateTime.Now,
                                        CreatedTerminal = objDM.TerminalID,

                                    };
                                    db.GtEsdobl.Add(dMaster);
                                    dataSaved = true;
                                }
                            }
                            else if (objDM.ActiveStatus != dMaster.ActiveStatus)
                            {
                                dMaster.ActiveStatus = objDM.ActiveStatus;
                                dMaster.ModifiedBy = objDM.UserID;
                                dMaster.ModifiedOn = System.DateTime.Now;
                                dMaster.ModifiedTerminal = objDM.TerminalID;
                                dataSaved = true;
                            }
                        }
                        if (!dataSaved)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Please Select any Business Location." };
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Business Location Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_BusinessLocation>> GetDoctorBusinessKey(int doctorId)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var bk = db.GtEcbsln
                        .Join(db.GtEsdobl, 
                        l => new {l.BusinessKey},
                        d => new {d.BusinessKey},
                        (l,d) => new {l,d}
                        )
                        .Where(w => w.d.ActiveStatus && w.l.ActiveStatus && w.d.DoctorId == doctorId)
                        .Select(r => new DO_BusinessLocation
                        {
                            BusinessKey = r.l.BusinessKey,
                            LocationDescription = r.l.BusinessName
                        }).Distinct().ToListAsync();

                    return await bk;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_BusinessLocation>> GetDoctorLocationbyDoctorId(int doctorId)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var bk = db.GtEsdobl.Where(x=>x.DoctorId==doctorId && x.ActiveStatus==true)
                        .Join(db.GtEcbsln,
                        l => new { l.BusinessKey },
                        d => new { d.BusinessKey },
                        (l, d) => new { l, d }
                        )
                       
                        .Select(r => new DO_BusinessLocation
                        {
                            BusinessKey = r.l.BusinessKey,
                            LocationDescription = r.d.BusinessName,
                        }).Distinct().ToListAsync();

                    return await bk;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Specialty Doctor Link

        public async Task<List<DO_SpecialtyDoctorLink>> GetSpecialtyListByDoctorId(int doctorId)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var do_ms = db.GtEsdosp
                        .Join(db.GtEsspcd,
                        d => new { d.SpecialtyId },
                        s => new { s.SpecialtyId },
                        (d, s) => new { d, s }
                        )
                        .Join(db.GtEcbsln,
                        dd => new {dd.d.BusinessKey},
                        b => new {b.BusinessKey},
                        (dd,b) => new {dd,b}
                        )
                        .Where(w => w.dd.d.DoctorId == doctorId && w.b.ActiveStatus && w.dd.s.ActiveStatus)
                        .AsNoTracking()
                        .Select(x => new DO_SpecialtyDoctorLink
                        {
                            DoctorID = x.dd.d.DoctorId,
                            SpecialtyID = x.dd.s.SpecialtyId,
                            SpecialtyDesc = x.dd.s.SpecialtyDesc,
                            LocationDesc = x.b.BusinessName,
                            BusinessKey = x.dd.d.BusinessKey,
                            ActiveStatus = x.dd.d.ActiveStatus

                        }).OrderBy(x => x.DoctorName).ToListAsync();

                    return await do_ms;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertDoctorSpecialtyLink(DO_SpecialtyDoctorLink obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEsdosp spDl = db.GtEsdosp.Where(x => x.BusinessKey == obj.BusinessKey && x.SpecialtyId == obj.SpecialtyID && x.DoctorId == obj.DoctorID).FirstOrDefault();
                        if (spDl != null)
                        {
                            spDl.ActiveStatus = obj.ActiveStatus;
                            spDl.ModifiedBy = obj.UserID;
                            spDl.ModifiedOn = System.DateTime.Now;
                            spDl.ModifiedTerminal = obj.TerminalID;
                        }
                        else if (obj.ActiveStatus)
                        {
                            var sMaster = new GtEsdosp
                            {
                                BusinessKey = obj.BusinessKey,
                                SpecialtyId = obj.SpecialtyID,
                                DoctorId = obj.DoctorID,
                                ActiveStatus = obj.ActiveStatus,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = System.DateTime.Now,
                                CreatedTerminal = obj.TerminalID,

                            };
                            db.GtEsdosp.Add(sMaster);
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Specialty Linked with Doctor Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateDoctorSpecialtyLink(DO_SpecialtyDoctorLink obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEsdosp sp_ms = db.GtEsdosp.Where(w => w.SpecialtyId == obj.SpecialtyID && w.BusinessKey == obj.BusinessKey && w.DoctorId == obj.DoctorID).FirstOrDefault();
                        if (sp_ms == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Specialty does not exist." };
                        }

                        sp_ms.ActiveStatus = obj.ActiveStatus;
                        sp_ms.ModifiedBy = obj.UserID;
                        sp_ms.ModifiedOn = System.DateTime.Now;
                        sp_ms.ModifiedTerminal = obj.TerminalID;

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Specialty Link Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_SpecialtyDoctorLink>> GetSpecialtyListByBKeyDoctorId(int businessKey, int doctorId)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var do_ms = db.GtEsdosp
                        .Join(db.GtEsspcd,
                        d => new { d.SpecialtyId },
                        c => new { c.SpecialtyId },
                        (d, c) => new { d, c }
                        )
                        .Where(w => w.d.BusinessKey == businessKey && w.d.DoctorId == doctorId && w.d.ActiveStatus && w.c.ActiveStatus)
                        .AsNoTracking()
                        .Select(x => new DO_SpecialtyDoctorLink
                        {
                            DoctorID = x.d.DoctorId,
                            SpecialtyID = x.d.SpecialtyId,
                            SpecialtyDesc = x.c.SpecialtyDesc

                        }).OrderBy(x => x.DoctorName).ToListAsync();

                    return await do_ms;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        #endregion

        #region Doctor Details
        public async Task<Do_DoctorDetails> GetDoctordetailsbydoctorId(int doctorId)
        {
            using (var db = new eSyaEnterprise())
                {
                    try
                    {
                        var dc_details = db.GtEsdoab.Where(x=>x.DoctorId==doctorId)
                            .Select(x => new Do_DoctorDetails
                            {
                                DoctorId=x.DoctorId,
                                LanguageKnown=x.LanguageKnown,
                                Experience=x.Experience,
                                CertificationCourse=x.CertificationCourse,
                                AboutDoctor=x.AboutDoctor,
                                //ProfileImagePath=x.ProfileImagePath,
                                ActiveStatus=x.ActiveStatus
                            })
                            .FirstOrDefaultAsync();

                        return await dc_details;
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }
            
        }

        public async Task<DO_ReturnParameter> InsertOrUpdateIntoDoctordetails(Do_DoctorDetails obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var dc_details = db.GtEsdoab.Where(x => x.DoctorId == obj.DoctorId).FirstOrDefault();
                        if (dc_details == null)
                        {
                            var details = new GtEsdoab
                            {
                                DoctorId = obj.DoctorId,
                                LanguageKnown = obj.LanguageKnown,
                                Experience = obj.Experience,
                                CertificationCourse = obj.CertificationCourse,
                                AboutDoctor = obj.AboutDoctor,
                                //ProfileImagePath = obj.ProfileImagePath,
                                ActiveStatus=obj.ActiveStatus,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = System.DateTime.Now,
                                CreatedTerminal = obj.TerminalID,

                            };
                            db.GtEsdoab.Add(details);
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Doctor Details Created sucessfully" };
                        }

                        else
                        {
                            dc_details.DoctorId = obj.DoctorId;
                            dc_details.LanguageKnown = obj.LanguageKnown;
                            dc_details.Experience = obj.Experience;
                            dc_details.CertificationCourse = obj.CertificationCourse;
                            dc_details.AboutDoctor = obj.AboutDoctor;
                            //dc_details.ProfileImagePath = obj.ProfileImagePath;
                            dc_details.ActiveStatus = obj.ActiveStatus;
                            dc_details.ModifiedBy = obj.UserID;
                            dc_details.ModifiedOn = System.DateTime.Now;
                            dc_details.ModifiedTerminal = obj.TerminalID;
                        }
                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Doctor Details Updated Successfully."};
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }
        #endregion Doctor Details

        #region Doctor day Schedule
        public async Task<List<DO_SpecialtyCodes>> GetSpecialtiesByBusinessKey(int businessKey)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var do_ms = db.GtEsspbl.Where(x=>x.BusinessKey==businessKey)
                        .Join(db.GtEsspcd.Where(x=>x.ActiveStatus==true),
                        d => new { d.SpecialtyId },
                        c => new { c.SpecialtyId },
                        (d, c) => new { d, c }
                        )
                        .AsNoTracking()
                        .Select(x => new DO_SpecialtyCodes
                        {
                            SpecialtyID = x.d.SpecialtyId,
                            SpecialtyDesc = x.c.SpecialtyDesc,
                            ActiveStatus=x.c.ActiveStatus
                        }).OrderBy(x => x.SpecialtyDesc).ToListAsync();

                    return await do_ms;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<List<DO_DoctorClinic>> GetClinicAndConsultationTypebySpecialty(int businessKey, int specialtyId)
        {
            using (var db = new eSyaEnterprise())
            {

                try
                {
                    var do_cl = db.GtEsopcl
                        .Join(db.GtEcapcd.Where(w => w.CodeType == CodeTypeValue.Clinic),
                            l => new { l.ClinicId },
                            c => new { ClinicId = c.ApplicationCode },
                            (l, c) => new { l, c })
                        .Join(db.GtEcapcd.Where(w => w.CodeType == CodeTypeValue.ConsultationType),
                            lc => new { lc.l.ConsultationId },
                            o => new { ConsultationId = o.ApplicationCode },
                            (lc, o) => new { lc, o })
                         .GroupJoin(db.GtEsdocl.Where(w => w.BusinessKey == businessKey && w.SpecialtyId == specialtyId),
                             lco => new { lco.lc.l.BusinessKey, lco.lc.l.ClinicId, lco.lc.l.ConsultationId },
                             d => new { d.BusinessKey, d.ClinicId, d.ConsultationId },
                             (lco, d) => new { lco, d = d.DefaultIfEmpty().FirstOrDefault() })
                         .Where(w => w.lco.lc.l.BusinessKey == businessKey)
                       .Select(r => new DO_DoctorClinic
                       {
                           
                           ClinicId= r.d != null ? r.d.ClinicId:0,
                           ClinicDesc= r.lco.lc.c.CodeDesc,
                           ConsultationId = r.d != null ? r.d.ConsultationId : 0,
                           ConsultationDesc = r.lco.o.CodeDesc,
                           ActiveStatus = r.d != null ? true : false

                           //BusinessKey = r.d != null ? r.d.BusinessKey : 0,
                           //ClinicId = r.lco.lc.l.ClinicId,
                           //ClinicDesc = r.lco.lc.c.CodeDesc,
                           //ConsultationId = r.lco.lc.l.ConsultationId,
                           //ConsultationDesc = r.lco.o.CodeDesc,
                           //ActiveStatus = r.d != null ? r.d.ActiveStatus : false
                       }).ToListAsync();

                 

                    return await do_cl;
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                
            }
        }

        public async Task<List<DO_DoctorMaster>> GetDoctorsbySpecialtyClinicAndConsultation(int businessKey,int specialtyId, int clinicId, int consultationId)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var do_cl = db.GtEsdocl
                        .Join(db.GtEcapcd.Where(w => w.CodeType == CodeTypeValue.Clinic),
                        l => new { l.ClinicId },
                        c => new { ClinicId = c.ApplicationCode },
                        (l, c) => new { l, c })
                        .Join(db.GtEcapcd.Where(w => w.CodeType == CodeTypeValue.ConsultationType),
                        lc => new { lc.l.ConsultationId },
                        o => new { ConsultationId = o.ApplicationCode },
                        (lc, o) => new { lc, o })
                        .Join(db.GtEsdocd.Where(w => w.ActiveStatus),
                        lco => new { lco.lc.l.DoctorId },
                        d => new { d.DoctorId },
                        (lco, d) => new { lco, d })
                        .Join(db.GtEsspcd.Where(w => w.ActiveStatus),
                        lcod => new { lcod.lco.lc.l.SpecialtyId },
                        s => new { s.SpecialtyId },
                        (lcod, s) => new { lcod, s })
                        .Where(w => w.lcod.lco.lc.l.BusinessKey == businessKey && w.lcod.lco.lc.l.SpecialtyId == specialtyId && w.lcod.lco.lc.l.ClinicId == clinicId && w.lcod.lco.lc.l.ConsultationId == consultationId)
                       .AsNoTracking()
                       .Select(r => new DO_DoctorMaster
                       {
                           DoctorId = r.lcod.lco.lc.l.DoctorId,
                           DoctorName = r.lcod.d.DoctorName,
                       }).ToListAsync();

                    return await do_cl;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<List<DO_DoctordaySchedule>> GetDoctordaySchedulebySearchCriteria(int businessKey,int specialtyId, int clinicId, int consultationId,int doctorId, DateTime scheduleFromDate, DateTime scheduleToDate)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var dc_sc = db.GtEsdos2
                        .Join(db.GtEsspcd,
                        o => new { o.SpecialtyId },
                        s => new { s.SpecialtyId },
                        (o, s) => new { o, s })
                        .Join(db.GtEsdocd,
                        os => new { os.o.DoctorId },
                        d => new { d.DoctorId },
                        (os, d) => new { os, d })

                        .Join(db.GtEcapcd.Where(w => w.CodeType == CodeTypeValue.Clinic),
                            l => new { l.os.o.ClinicId},
                            c => new { ClinicId = c.ApplicationCode },
                            (l, c) => new { l, c })
                        .Join(db.GtEcapcd.Where(w => w.CodeType == CodeTypeValue.ConsultationType),
                            lc => new { lc.l.os.o.ConsultationId},
                            ol => new { ConsultationId = ol.ApplicationCode },
                            (lc, ol) => new { lc, ol })
                        .Where(w => w.lc.l.os.o.BusinessKey == businessKey && w.lc.l.os.o.ClinicId == clinicId && w.lc.l.os.o.ConsultationId == consultationId
                         && w.lc.l.os.o.SpecialtyId == specialtyId && w.lc.l.os.o.DoctorId == doctorId && w.lc.l.os.o.ScheduleDate.Date >= scheduleFromDate.Date 
                         && w.lc.l.os.o.ScheduleDate.Date <= scheduleToDate.Date)

                        .AsNoTracking()

                        .Select(x => new DO_DoctordaySchedule
                        {
                            
                            BusinessKey = x.lc.l.os.o.BusinessKey,
                            ConsultationId = x.lc.l.os.o.ConsultationId,
                            ConsultationDesc = x.ol.CodeDesc,
                            ClinicId = x.lc.l.os.o.ClinicId,
                            ClinicDesc = x.lc.c.CodeDesc,
                            SpecialtyId = x.lc.l.os.o.SpecialtyId,
                            SpecialtyDesc = x.lc.l.os.s.SpecialtyDesc,
                            DoctorId = x.lc.l.os.o.DoctorId,
                            DoctorName = x.lc.l.d.DoctorName,
                            ScheduleDate = x.lc.l.os.o.ScheduleDate,
                            SerialNo = x.lc.l.os.o.SerialNo,
                            ScheduleFromTime = x.lc.l.os.o.ScheduleFromTime,
                            ScheduleToTime = x.lc.l.os.o.ScheduleToTime,
                            NoOfPatients = x.lc.l.os.o.NoOfPatients,
                            XlsheetReference=x.lc.l.os.o.XlsheetReference,
                            ActiveStatus = x.lc.l.os.o.ActiveStatus
                        })
                        .ToListAsync();

                    return await dc_sc;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertIntoDoctordaySchedule(DO_DoctordaySchedule obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var ds_list = db.GtEsdos2.Where(x => x.BusinessKey == obj.BusinessKey && x.ConsultationId == obj.ConsultationId
                                      && x.ClinicId == obj.ClinicId && x.SpecialtyId == obj.SpecialtyId && x.DoctorId == obj.DoctorId
                                      && x.ScheduleDate == obj.ScheduleDate && x.ActiveStatus).ToList();

                        bool isexists = false;
                        foreach (var item in ds_list)
                        {
                            if ((obj.ScheduleFromTime >= item.ScheduleFromTime && obj.ScheduleFromTime < item.ScheduleToTime)
                                   || (obj.ScheduleToTime > item.ScheduleFromTime && obj.ScheduleToTime <= item.ScheduleToTime))
                            {
                                isexists = true;
                            }
                        }
                        if (isexists == true)
                        {
                             return new DO_ReturnParameter() { Status = false, Message = "Time slot for selected date is already exists." };
                        }
                        var _isexists =await db.GtEsdos2.Where(x => x.BusinessKey == obj.BusinessKey && x.ConsultationId == obj.ConsultationId
                                     && x.ClinicId == obj.ClinicId && x.SpecialtyId == obj.SpecialtyId && x.DoctorId == obj.DoctorId
                                     && x.ScheduleDate == obj.ScheduleDate).FirstOrDefaultAsync();
                        if (_isexists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "already exists." };
                        }
                        else
                        {
                            int serialNumber = db.GtEsdos2.Where(x => x.BusinessKey == obj.BusinessKey && x.ConsultationId == obj.ConsultationId && x.ClinicId == obj.ClinicId && x.SpecialtyId == obj.SpecialtyId && x.DoctorId == obj.DoctorId && x.ScheduleDate == obj.ScheduleDate).Select(x => x.SerialNo).DefaultIfEmpty().Max() + 1;
                            ////int serialNumber = db.GtEsdos2.Where(x => x.BusinessKey == obj.BusinessKey && x.ConsultationId == obj.ConsultationId && x.ClinicId == obj.ClinicId && x.SpecialtyId == obj.SpecialtyId && x.DoctorId == obj.DoctorId ).Select(x => x.SerialNo).DefaultIfEmpty().Max() + 1;

                            var do_sc = new GtEsdos2
                            {
                                BusinessKey = obj.BusinessKey,
                                ConsultationId = obj.ConsultationId,
                                ClinicId = obj.ClinicId,
                                SpecialtyId = obj.SpecialtyId,
                                DoctorId = obj.DoctorId,
                                ScheduleDate = obj.ScheduleDate,
                                SerialNo = serialNumber,
                                ScheduleFromTime = obj.ScheduleFromTime,
                                ScheduleToTime = obj.ScheduleToTime,
                                NoOfPatients = obj.NoOfPatients,
                                //XlsheetReference = "#",
                                XlsheetReference = obj.XlsheetReference,
                                ActiveStatus = obj.ActiveStatus,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = System.DateTime.Now,
                                CreatedTerminal = obj.TerminalID,
                            };

                            db.GtEsdos2.Add(do_sc);
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Doctor day Schedule Created Successfully." };
                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateDoctordaySchedule(DO_DoctordaySchedule obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEsdos2 _daySchedule = db.GtEsdos2.Where(x => x.BusinessKey == obj.BusinessKey && x.ConsultationId == obj.ConsultationId && x.ClinicId == obj.ClinicId && x.SpecialtyId == obj.SpecialtyId && x.DoctorId == obj.DoctorId && x.ScheduleDate == obj.ScheduleDate && x.SerialNo == obj.SerialNo).FirstOrDefault();
                        if (_daySchedule == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Doctor day Schedule doesn't Exists to update" };
                        }
                        else
                        {
                            bool isexists = false;
                            var ds_list = db.GtEsdos2.Where(x => x.BusinessKey == obj.BusinessKey && x.ConsultationId == obj.ConsultationId
                                      && x.ClinicId == obj.ClinicId && x.SpecialtyId == obj.SpecialtyId && x.DoctorId == obj.DoctorId
                                      && x.ScheduleDate == obj.ScheduleDate && x.ActiveStatus && x.SerialNo != obj.SerialNo).ToList();

                            foreach (var item in ds_list)
                            {
                                if ((obj.ScheduleFromTime >= item.ScheduleFromTime && obj.ScheduleFromTime < item.ScheduleToTime)
                                       || (obj.ScheduleToTime > item.ScheduleFromTime && obj.ScheduleToTime <= item.ScheduleToTime))
                                {
                                    isexists = true;
                                }
                            }
                            if (isexists == true)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Time slot for selected date is already exists." };
                            }

                            _daySchedule.ScheduleFromTime = obj.ScheduleFromTime;
                            _daySchedule.ScheduleToTime = obj.ScheduleToTime;
                            _daySchedule.NoOfPatients = obj.NoOfPatients;
                            _daySchedule.XlsheetReference = obj.XlsheetReference;
                            _daySchedule.ActiveStatus = obj.ActiveStatus;
                            _daySchedule.ModifiedBy = obj.UserID;
                            _daySchedule.ModifiedOn = System.DateTime.Now;
                            _daySchedule.ModifiedTerminal = obj.TerminalID;

                        };

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Doctor day Schedule Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> ActiveOrDeActiveDoctordaySchedule(DO_DoctordaySchedule objdel)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEsdos2 _dayschedule = db.GtEsdos2.Where(x => x.BusinessKey == objdel.BusinessKey && x.ConsultationId == objdel.ConsultationId && x.ClinicId == objdel.ClinicId && x.SpecialtyId == objdel.SpecialtyId && x.DoctorId == objdel.DoctorId && x.SerialNo == objdel.SerialNo && x.ScheduleDate== objdel.ScheduleDate).FirstOrDefault();
                        if (_dayschedule == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Doctor Scheduler is not exist" };
                        }

                        _dayschedule.ActiveStatus = objdel.status;
                        await db.SaveChangesAsync();
                        dbContext.Commit();

                        if (objdel.status == true)
                            return new DO_ReturnParameter() { Status = true, Message = "Doctor day Schedule Activated Successfully." };
                        else
                            return new DO_ReturnParameter() { Status = true, Message = "Doctor day Schedule De Activated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));

                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> ImpotedDoctorScheduleList(List<DO_DoctordaySchedule> obj)
        {
            using (var db = new eSyaEnterprise())
            {

                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                       
                        foreach (var time in obj)
                        {
                            if (time.ScheduleFromTime >= time.ScheduleToTime)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = time.ScheduleFromTime+ "From Time can't be more than or equal to" + time.ScheduleToTime + "To Time." };
                            }
                           
                            var doctor = db.GtEsdocd.Where(x => x.DoctorName.ToUpper().Trim() == time.DoctorName.ToUpper().Trim()).FirstOrDefault();
                            if (doctor == null)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Doctor:" + time.DoctorName + "is not avalabe" };
                            }
                            else
                            {
                                time.DoctorId = doctor.DoctorId;
                            }
                            var clinic = db.GtEcapcd.Where(x => x.CodeDesc.ToUpper().Trim() == time.ClinicDesc.ToUpper().Trim()).FirstOrDefault();
                            if (clinic == null)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Doctor:" + time.ClinicDesc + "is not avalabe" };
                            }
                            else
                            {
                                time.ClinicId = clinic.ApplicationCode;
                            }
                            var consultation = db.GtEcapcd.Where(x => x.CodeDesc.ToUpper().Trim() == time.ConsultationDesc.ToUpper().Trim()).FirstOrDefault();
                            if (consultation == null)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Doctor:" + time.ConsultationDesc + "is not avalabe" };
                            }
                            else
                            {
                                time.ConsultationId = consultation.ApplicationCode;
                            }
                            var specialty = db.GtEsspcd.Where(x => x.SpecialtyDesc.ToUpper().Trim() == time.SpecialtyDesc.ToUpper().Trim()).FirstOrDefault();
                            if (specialty == null)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Doctor:" + time.SpecialtyDesc + "is not avalabe" };
                            }
                            else
                            {
                                time.SpecialtyId = specialty.SpecialtyId;
                            }


                            var ds_list = db.GtEsdos2.Where(x => x.BusinessKey == time.BusinessKey && x.ConsultationId == time.ConsultationId
                                      && x.ClinicId == time.ClinicId && x.SpecialtyId == time.SpecialtyId && x.DoctorId == time.DoctorId
                                      && x.ScheduleDate == time.ScheduleDate && x.ActiveStatus).ToList();

                            bool isexists = false;
                            foreach (var _isexists in ds_list)
                            {
                                if ((time.ScheduleFromTime >= _isexists.ScheduleFromTime && time.ScheduleFromTime < _isexists.ScheduleToTime)
                                       || (time.ScheduleToTime > _isexists.ScheduleFromTime && time.ScheduleToTime <= _isexists.ScheduleToTime))
                                {
                                    isexists = true;
                                }
                            }
                            if (isexists == true)
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Time slot for Date:" +time.ScheduleDate+ "is already exists for Doctor:" + time.DoctorName };
                            }

                            var scheduled = await db.GtEsdos2.Where(x => x.BusinessKey == time.BusinessKey && x.ConsultationId == time.ConsultationId
                                     && x.ClinicId == time.ClinicId && x.SpecialtyId == time.SpecialtyId && x.DoctorId == time.DoctorId
                                     && x.ScheduleDate == time.ScheduleDate && x.SerialNo == time.SerialNo).FirstOrDefaultAsync();

                            if (scheduled == null)
                            {
                                int serialNumber = db.GtEsdos2.Where(x => x.BusinessKey == time.BusinessKey && x.ConsultationId == time.ConsultationId && x.ClinicId == time.ClinicId && x.SpecialtyId == time.SpecialtyId && x.DoctorId == time.DoctorId && x.ScheduleDate == time.ScheduleDate).Select(x => x.SerialNo).DefaultIfEmpty().Max() + 1;
                                //int serialNumber = db.GtEsdos2.Where(x => x.BusinessKey == time.BusinessKey && x.ConsultationId == time.ConsultationId && x.ClinicId == time.ClinicId && x.SpecialtyId == time.SpecialtyId && x.DoctorId == time.DoctorId).Select(x => x.SerialNo).DefaultIfEmpty().Max() + 1;
                                var do_sc = new GtEsdos2
                                {
                                    BusinessKey = time.BusinessKey,
                                    ConsultationId = time.ConsultationId,
                                    ClinicId = time.ClinicId,
                                    SpecialtyId = time.SpecialtyId,
                                    DoctorId = time.DoctorId,
                                    ScheduleDate = time.ScheduleDate,
                                    SerialNo = serialNumber,
                                    ScheduleFromTime = time.ScheduleFromTime,
                                    ScheduleToTime = time.ScheduleToTime,
                                    NoOfPatients = time.NoOfPatients,
                                    XlsheetReference = "#",
                                    ActiveStatus = time.ActiveStatus,
                                    FormId = time.FormId,
                                    CreatedBy = time.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = time.TerminalID,
                                };

                                db.GtEsdos2.Add(do_sc);
                                await db.SaveChangesAsync();
                            }
                            else
                            {
                                scheduled.ScheduleFromTime = time.ScheduleFromTime;
                                scheduled.ScheduleToTime = time.ScheduleToTime;
                                scheduled.NoOfPatients = time.NoOfPatients;
                                scheduled.XlsheetReference = "#";
                                scheduled.ActiveStatus = time.ActiveStatus;
                                scheduled.ModifiedBy = time.UserID;
                                scheduled.ModifiedOn = System.DateTime.Now;
                                scheduled.ModifiedTerminal = time.TerminalID;
                                await db.SaveChangesAsync();
                            }

                        }
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Excel Imported Successfully for Doctor Schedule " };
                    }
                    catch (DbUpdateException ex)
                    {

                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }

                }
            }

        }
        

        #endregion
    }
}

